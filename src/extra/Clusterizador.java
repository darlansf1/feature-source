/*
 * Clusterizador.java
 *
 * Created on March 19, 2010, 8:48 AM
 */

package extra;

import feature.GerenciadorArquivos;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  ragero
 */
public class Clusterizador extends javax.swing.JFrame {
    
    /** Creates new form Clusterizador */
    public Clusterizador() {
        initComponents();
        this.setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tDirIn = new javax.swing.JTextField();
        tDirOut = new javax.swing.JTextField();
        bProcIn = new javax.swing.JButton();
        bProcOut = new javax.swing.JButton();
        bClust = new javax.swing.JButton();
        bSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clusterizador");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Diretórios"));

        jLabel1.setText("Discovers:");

        jLabel2.setText("Resultados:");

        bProcIn.setText("Procurar...");
        bProcIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcInActionPerformed(evt);
            }
        });

        bProcOut.setText("Procurar...");
        bProcOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tDirOut)
                    .addComponent(tDirIn, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bProcIn)
                    .addComponent(bProcOut))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bProcIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bProcOut)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tDirIn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tDirOut, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bClust.setFont(new java.awt.Font("Tahoma", 1, 11));
        bClust.setText("Clusterizar");
        bClust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClustActionPerformed(evt);
            }
        });

        bSair.setText("Sair");
        bSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(492, Short.MAX_VALUE)
                .addComponent(bClust)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSair, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSair)
                    .addComponent(bClust))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bProcInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcInActionPerformed
        JFileChooser open = new JFileChooser();
        open.setFileSelectionMode(open.DIRECTORIES_ONLY);
        open.setDialogTitle("Selecione o Diretório");
        open.setDialogType(open.OPEN_DIALOG);
        open.showOpenDialog(null);
        if(open.getSelectedFile()==null){
            tDirIn.setText("");
        }else{
            tDirIn.setText(open.getSelectedFile().toString());
        }
    }//GEN-LAST:event_bProcInActionPerformed

    private void bProcOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcOutActionPerformed
        JFileChooser open = new JFileChooser();
        open.setFileSelectionMode(open.DIRECTORIES_ONLY);
        open.setDialogTitle("Selecione o Diretório");
        open.setDialogType(open.OPEN_DIALOG);
        open.showOpenDialog(null);
        if(open.getSelectedFile()==null){
            tDirOut.setText("");
        }else{
            tDirOut.setText(open.getSelectedFile().toString());
        }
    }//GEN-LAST:event_bProcOutActionPerformed

    private boolean ValidarDir(){
        File dirIn = new File(tDirIn.getText());
        if(!dirIn.isDirectory()){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não é válido", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!dirIn.exists()){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não existe", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File dirOut = new File(tDirOut.getText());
        if(!dirOut.isDirectory()){
            JOptionPane.showMessageDialog(null, "O diretório de saída não é valido", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!dirOut.exists()){
            JOptionPane.showMessageDialog(null, "O diretório de saída não existe", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File[] files = dirIn.listFiles();
        if(files.length==0){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não possui arquivos", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if(dirIn.toString().equals(dirOut.toString())){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não pode ser igual ao diretório de saída", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }
    
    
    private void bClustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClustActionPerformed
        boolean valida = ValidarDir();
        if(valida == false){
            return;
        }
        File dirIn = new File(tDirIn.getText());
        File dirOut = new File(tDirOut.getText());
        ArrayList<File> filesIn = new ArrayList<File>();
        ArrayList<File> filesOut = new ArrayList<File>();
                
        ArrayList<String> dirs = new ArrayList<String>();
        boolean criarDir = GerenciadorArquivos.ListaDirs(dirIn, dirOut, dirs, dirIn);
        int lengthDirIn = dirIn.toString().length();
        
        StringBuffer rec = new StringBuffer("");
        
        Object[] diretorios = dirs.toArray();
        Arrays.sort(diretorios);
        
        for(int i=0;i<diretorios.length;i++){
            String dir = diretorios[i].toString();
            System.out.println("Diretório da análise: " + dir);
            
            File[] files = new File(dir).listFiles();
            String dData = "";
            String dNames = "";
            int cData = 0;
            int cNames = 0;
            for(int j=0;j<files.length;j++){
                String nomeArq = files[j].toString();
                if(nomeArq.endsWith(".data")){
                    cData++;
                    dData = new String(nomeArq);
                 }
                if(nomeArq.endsWith(".names")){
                    cNames++;
                    dNames = new String(nomeArq);
                }
            }
            if((cData > 1)||(cNames > 1)){
                System.out.println("O diretório " + dirs.get(i) + " possui mais que um arquivo .data ou .names.\n A operação de conversão não será realizada para os arquivos deste diretório.");
                continue;
            }

            if((cData == 0)||(cNames == 0)){
                System.out.println("O diretório " + dirs.get(i) + " não possui um arquivo .data ou .names.\n A operação de conversão não será realizada para os arquivos deste diretório.");
                continue;
            }
            
            rec.append(dir + "------------------------------------------------------\n");
            
            
            String dirsIn = dirs.get(i).toString();
            dirsIn.replace("\\", "/");
            String fileOut = dirsIn.substring(lengthDirIn,dirsIn.length());
            fileOut.replace("\\", "/");
            String nameOut = fileOut.replace("/", "_");
            if(nameOut.startsWith("_")){
                nameOut = nameOut.substring(1, nameOut.length());
            }
            fileOut = dirOut.toString();
            
            //Apagando arquivos
            File arq = new File("/exp/ragero/taxtools/average.hie");
            if(arq.exists()){
                arq.delete();    
            }
            arq = new File("/exp/ragero/taxtools/cluster.r");
            if(arq.exists()){
                arq.delete();    
            }
            arq = new File("/exp/ragero/taxtools/cophenetic_average.txt");
            if(arq.exists()){
                arq.delete();    
            }
            arq = new File("/exp/ragero/taxtools/docClasse.r");
            if(arq.exists()){
                arq.delete();    
            }
            arq = new File("/exp/ragero/taxtools/docClassesLimpo.r");
            if(arq.exists()){
                arq.delete();    
            }
            arq = new File("/exp/ragero/taxtools/mdist.rdata");
            if(arq.exists()){
                arq.delete();    
            }
            arq = new File("/exp/ragero/taxtools/dendrograms/dendrogram_average.txt");
            if(arq.exists()){
                arq.delete();    
            }
            
            
            //Chamando Aplicativo para clusterizar
            String[] comando = new String[8];
            comando[0] = "java";
            comando[1] = "-jar";
            comando[2] = "/exp/ragero/taxtools/taxtools.jar";
            comando[3] = "cluster";
            //comando[4] = dir;
            comando[4] = "/exp/ragero/taxtools/";
            comando[5] = dData;
            comando[6] = dNames;
            comando[7] = "average";
            
            System.out.println("Clusterizando a base.");
            try{
                boolean nunca = true;
                while(nunca == true){
                    //Process process = Runtime.getRuntime().exec(comando);
                    Process process = new ProcessBuilder(comando).start();
                    process.waitFor();
                    InputStream is = process.getInputStream();
                    InputStreamReader isr = new InputStreamReader(is);
                    BufferedReader br = new BufferedReader(isr);
                    String line = "";
                    while ((line = br.readLine())!=null) { 
                        System.out.println(line);
                        System.out.println("Aqui 1");
                        nunca = false;
                    }
                    process.waitFor();
                    process.destroy();
                }    
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this,"Problemas na execução do cálculo da fscore!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //Preprocessar o arquivo DocClasses
            System.out.println("Passando filtro no documento de classes.");
            comando = new String[4];
            comando[0] = "perl";
            comando[1] = "/exp/ragero/taxtools/script.pl";
            comando[2] = "/exp/ragero/taxtools/docClasse.txt";
            comando[3] = "/exp/ragero/taxtools/docClassesLimpo.txt";
            try{
                boolean nunca = true;
                while(nunca == true){
                    Process process = new ProcessBuilder(comando).start();
                    //Process process = Runtime.getRuntime().exec(comando);
                    //process.waitFor();
                    InputStream is = process.getInputStream();
                    InputStreamReader isr = new InputStreamReader(is);
                    BufferedReader br = new BufferedReader(isr);
                    String line = "";
                    while ((line = br.readLine())!=null) { 
                        System.out.println(line);
                        System.out.println("Aqui 2");
                        nunca = false;
                    }
                    process.waitFor();
                    process.destroy();
                }    
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this,"Problemas na execução do cálculo da fscore!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }        
            
            
            //Chamando Aplicativo para calcular o Fscore
            System.out.println("Calculando a Fscore.");
            comando = new String[8];
            comando[0] = "java";
            comando[1] = "-jar";
            comando[2] = "/exp/ragero/taxtools/taxtools.jar";
            comando[3] = "fscore";
            comando[4] = "/exp/ragero/taxtools/";
            comando[5] = "/exp/ragero/taxtools/average.hie";
            comando[6] = "/exp/ragero/taxtools/res_fscore.txt";
            comando[7] = "docClassesLimpo.txt";
            
            try{
                boolean nunca = true;
                while(nunca == true){
                    //Process process = Runtime.getRuntime().exec(comando);
                    Process process = new ProcessBuilder(comando).start();
                    //process.waitFor();
                    InputStream is = process.getInputStream();
                    InputStreamReader isr = new InputStreamReader(is);
                    BufferedReader br = new BufferedReader(isr);
                    String line = "";
                    while ((line = br.readLine())!=null) { 
                        if(line.toLowerCase().contains("fscore")){
                            System.out.println("Aqui 3");
                            rec.append(line + "\n");
                        }
                        System.out.println(line);
                        nunca = false;
                    }
                    process.waitFor();
                    process.destroy();
                }    
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this,"Problemas na execução do cálculo da fscore!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
           
        }    
        
        System.out.println("Gravando arquivo de saida...");
        try{
            FileWriter arq = new FileWriter(dirOut.toString() + "/fscore.txt");
            arq.write(rec.toString());
            arq.close();
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,"Problemas na gravação do arquivo contendo os resultados da fscore!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("Arquivo contendo o Fscore das coleções analisadas foi gravado");
        
        JOptionPane.showMessageDialog(null, "Operação concluída com sucesso", "NGramGenerator", JOptionPane.PLAIN_MESSAGE);
}//GEN-LAST:event_bClustActionPerformed

    private void bSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_bSairActionPerformed
    
    /**
     * @param args the command line arguments
     */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClust;
    private javax.swing.JButton bProcIn;
    private javax.swing.JButton bProcOut;
    private javax.swing.JButton bSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tDirIn;
    private javax.swing.JTextField tDirOut;
    // End of variables declaration//GEN-END:variables
    
}
