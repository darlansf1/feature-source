/*
 * SepararDiscoverTT.java
 *
 * Created on August 16, 2010, 2:38 PM
 */

package feature;

import estruturas.arqFreq;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  ragero
 */
public class SepararDiscoverTT extends javax.swing.JFrame {
    
    /** Creates new form SepararDiscoverTT */
    public SepararDiscoverTT() {
        initComponents();
        this.setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cClasse = new javax.swing.JCheckBox();
        bConverter = new javax.swing.JButton();
        bSair = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tDirIn = new javax.swing.JTextField();
        tDirOut = new javax.swing.JTextField();
        bProcIn = new javax.swing.JButton();
        bProcOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cClasse.setText("Arquivos com classe separados por pastas");

        bConverter.setFont(new java.awt.Font("Tahoma", 1, 11));
        bConverter.setText("Converter");
        bConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConverterActionPerformed(evt);
            }
        });

        bSair.setText("Sair");
        bSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSairActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Diretórios"));

        jLabel1.setText("Entrada:");

        jLabel2.setText("Saida:");

        bProcIn.setText("Procurar...");
        bProcIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcInActionPerformed(evt);
            }
        });

        bProcOut.setText("Procurar...");
        bProcOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tDirOut)
                    .addComponent(tDirIn, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bProcIn)
                    .addComponent(bProcOut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tDirIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bProcIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tDirOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bProcOut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 621, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cClasse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(bConverter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bSair, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSair)
                    .addComponent(bConverter)
                    .addComponent(cClasse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private boolean ValidarDir(){
        File dirIn = new File(tDirIn.getText());
        if(!dirIn.isDirectory()){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não é válido", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!dirIn.exists()){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não existe", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File dirOut = new File(tDirOut.getText());
        if(!dirOut.isDirectory()){
            JOptionPane.showMessageDialog(null, "O diretório de saída não é valido", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!dirOut.exists()){
            JOptionPane.showMessageDialog(null, "O diretório de saída não existe", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File[] files = dirIn.listFiles();
        if(files.length==0){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não possui arquivos", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if(dirIn.toString().equals(dirOut.toString())){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não pode ser igual ao diretório de saída", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }
    
    private void bConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConverterActionPerformed
        boolean valida = ValidarDir();
        if(valida == false){
            return;
        }
        File dirIn = new File(tDirIn.getText());
        File dirOut = new File(tDirIn.getText());
        ArrayList<File> filesIn = new ArrayList<File>();
        ArrayList<File> filesOut = new ArrayList<File>();
        ArrayList<String> classes = new ArrayList<String>();
        HashMap<String,ArrayList<arqFreq>> hash = new HashMap<String,ArrayList<arqFreq>>();
        
        
        GerenciadorArquivos.ListaArquivos(dirIn, dirOut, filesIn, filesOut, dirIn);
        if(cClasse.isSelected()){
            GerenciadorArquivos.ListaClasses(dirIn, classes);
        }
        
        for(int i=0;i<filesIn.size();i++){
            try{
                String file = filesIn.get(i).toString();
                System.out.println(file);
                RandomAccessFile arqIn = new RandomAccessFile(file, "r");
                String line = "";
                
                while((line=arqIn.readLine())!=null){
                    line = line.trim();
                    line = line.replaceAll(" ", "_");
                    
                    //Armazenando os arquivos em que o termo aparece
                    if(hash.containsKey(line)==false){
                        ArrayList<arqFreq> files = new ArrayList<arqFreq>();
                        arqFreq obj = new arqFreq(file,1);
                        files.add(obj);
                        hash.put(line, files);
                        
                    }else{
                        ArrayList<arqFreq> files = hash.get(line);
                        boolean existe = false;
                        for(int j=0;j<files.size();j++){
                            arqFreq obj = files.get(j);
                            if(obj.arquivo.equals(file)){
                                Integer freq = new Integer(obj.frequencia);
                                freq = freq + 1;
                                String arquivo = new String(obj.arquivo);
                                files.remove(obj);
                                arqFreq newObj = new arqFreq(arquivo, freq);
                                files.add(newObj);
                                existe = true;
                                break;
                            }
                        }
                        if(existe == false){
                            arqFreq obj = new arqFreq(file,1);
                            files.add(obj);
                            hash.remove(line);
                            hash.put(line, files);
                        }
                        
                    }
                    //Contabilizando a Frequencia
                }
                arqIn.close();
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Ocorreu um erro na leitura dos arquivos contendo os n-gramas.\nO aplicativo será finalizado.", "Erro", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                System.exit(i);
            }
        }
        
        //Gerando o arquivo discover.names
        System.out.println("Gravando discover.name de TREINO E TESTE...");
        
        try{
            FileWriter arqTreino = new FileWriter(tDirOut.getText() + "/discoverTreino.names");
            FileWriter arqTeste = new FileWriter(tDirOut.getText() + "/discoverTeste.names");
          

            StringBuffer contentTreino = new StringBuffer();
            StringBuffer contentTeste = new StringBuffer();
            String conteudo = "";
            if(cClasse.isSelected()){
                contentTreino.append("att_class.\n");
                contentTeste.append("att_class.\n");
            }
            contentTreino.append("filename:string:ignore.\n");
            contentTeste.append("filename:string:ignore.\n");
            
            Set<String> ngrams = hash.keySet();
            System.out.println("Número de atributos:" + ngrams.size());
            Iterator it = ngrams.iterator();
            while(it.hasNext()){
                String ngram = (String)it.next();
                contentTreino.append("\"" + ngram + "\"" + ":integer.\n");
                contentTeste.append("\"" + ngram + "\"" + ":integer.\n");
                
            }
            
            
            if(cClasse.isSelected()){
                contentTreino.append("att_class:nominal(");
                contentTeste.append("att_class:nominal(");
                conteudo = "";
                for(int j=0;j<classes.size();j++){
                    conteudo = conteudo + "\"" + classes.get(j) + "\",";
                    
                }
                if(conteudo.length()>0){
                    conteudo = conteudo.substring(0,conteudo.length()-1);
                }else{
                    conteudo = "";
                }
                
                
                contentTreino.append(conteudo +  ").");
                contentTeste.append(conteudo +  ").");
                
            }
            
            arqTreino.write(contentTreino.toString());
            arqTeste.write(contentTeste.toString());
            arqTreino.close();
            arqTeste.close();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao gerar o arquivo discover.names.\nO aplicativo será finalizado.", "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(0);
        }
        System.out.println("Discover.names OK");
        
        //Gerando arquivo discover.data
        System.out.println("Gravando discover.data...");
        try{
            Set<String> ngrams = hash.keySet();
            int dim1 = filesIn.size();
            int dim2 = ngrams.size() + 1;
            if(cClasse.isSelected()){
                dim2 = dim2 + 1;
            }
            
            String[][] matriz = new String[dim1][dim2];
            //Inicializando a matriz
            for(int i=0;i<dim1;i++){
                for(int j=0;j<dim2;j++){
                    matriz[i][j] = "0";
                }
            }
            
            
            //Gravando os endereços dos arquivos na matriz
            HashMap<String,Integer> hashFile = new HashMap<String,Integer>();
            
            for(int i=0;i<filesIn.size();i++){
                String arquivo = new String(filesIn.get(i).toString());
                matriz[i][0] = "\"" + arquivo + "\"";
                hashFile.put(arquivo.replace('\\', '/'), i);
            }
            
            Object[] ngramas = ngrams.toArray();
            for(int i=0;i<ngramas.length;i++){
                String ngram = ngramas[i].toString();
                ArrayList<arqFreq> arquivos = hash.get(ngram);
                for(int j=0;j<arquivos.size();j++){
                    arqFreq obj = arquivos.get(j);
                    String arquivo = obj.arquivo;
                    Integer frequencia = obj.frequencia;
                    int indArq = hashFile.get(arquivo);
                    matriz[indArq][i+1] = frequencia.toString();
                }
            }
            
            //Gravando a classe nas linhas da matriz
            if(cClasse.isSelected()){
                for(int i=0;i<filesIn.size();i++){
                    String classe = matriz[i][0];
                    classe = classe.substring(1, classe.length());
                    classe = classe.substring(0, classe.lastIndexOf("/"));
                    classe = classe.substring(classe.lastIndexOf("/")+1, classe.length());
                    matriz[i][dim2 -1] = classe;
                }
            }
            
            //Gravando a matriz no arquivo discover.data
            /*FileWriter arq = new FileWriter(tDirOut.getText() + "/discover.data");
            for(int i=0;i<dim1;i++){
                String linha = "";
                for(int j=0;j<dim2;j++){
                    linha = linha + matriz[i][j] + ",";
                }
                linha = linha.substring(0, linha.length()-1);
                arq.write(linha + "\n");
                System.out.print(".");
            }*/
            
            FileWriter arqTreino = new FileWriter(tDirOut.getText() + "/discoverTreino.data");
            FileWriter arqTeste = new FileWriter(tDirOut.getText() + "/discoverTeste.data");
            
            for(int i=0;i<dim1;i++){
                StringBuffer linha = new StringBuffer();
                //String linha = "";
                for(int j=0;j<dim2;j++){
                    linha.append(matriz[i][j] + ",");
                }
                File arquivo = new File(matriz[i][0].toString());
                if(arquivo.getName().toString().toLowerCase().contains("test")){
                    arqTeste.write(linha.toString().substring(0, linha.length()-1) + "\n");
                }else{
                    arqTreino.write(linha.toString().substring(0, linha.length()-1) + "\n");
                }
                
                System.out.print(".");
            }
            
            arqTreino.close();
            arqTeste.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao gerar o arquivo discover.data.\nO aplicativo será finalizado.", "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(0);
        }
        System.out.println("Discover.data OK");
        JOptionPane.showMessageDialog(null, "Operação concluída com sucesso", "NGramGenerator", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_bConverterActionPerformed

    private void bSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_bSairActionPerformed

    private void bProcInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcInActionPerformed
        JFileChooser open = new JFileChooser();
        open.setFileSelectionMode(open.DIRECTORIES_ONLY);
        open.setDialogTitle("Selecione o Diretório");
        open.setDialogType(open.OPEN_DIALOG);
        open.showOpenDialog(null);
        if(open.getSelectedFile()==null){
            tDirIn.setText("");
        }else{
            tDirIn.setText(open.getSelectedFile().toString());
        }
    }//GEN-LAST:event_bProcInActionPerformed

    private void bProcOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcOutActionPerformed
        JFileChooser open = new JFileChooser();
        open.setFileSelectionMode(open.DIRECTORIES_ONLY);
        open.setDialogTitle("Selecione o Diretório");
        open.setDialogType(open.OPEN_DIALOG);
        open.showOpenDialog(null);
        if(open.getSelectedFile()==null){
            tDirOut.setText("");
        }else{
            tDirOut.setText(open.getSelectedFile().toString());
        }
    }//GEN-LAST:event_bProcOutActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SepararDiscoverTT().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConverter;
    private javax.swing.JButton bProcIn;
    private javax.swing.JButton bProcOut;
    private javax.swing.JButton bSair;
    private javax.swing.JCheckBox cClasse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tDirIn;
    private javax.swing.JTextField tDirOut;
    // End of variables declaration//GEN-END:variables
    
}
