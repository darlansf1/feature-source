/*
 * SepararDiscoverBagTT.java
 *
 * Created on August 17, 2010, 11:29 AM
 */

package feature;

import java.io.File;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  ragero
 */
public class SepararDiscoverBagTT extends javax.swing.JFrame {
    
    /** Creates new form SepararDiscoverBagTT */
    public SepararDiscoverBagTT() {
        initComponents();
        this.setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Separar = new javax.swing.JButton();
        bSair = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tDirIn = new javax.swing.JTextField();
        tDirOut = new javax.swing.JTextField();
        bProcIn = new javax.swing.JButton();
        bProcOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Separar.setFont(new java.awt.Font("Tahoma", 1, 11));
        Separar.setText("Converter");
        Separar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SepararActionPerformed(evt);
            }
        });

        bSair.setText("Sair");
        bSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSairActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Diretórios"));

        jLabel1.setText("Entrada:");

        jLabel2.setText("Saida:");

        bProcIn.setText("Procurar...");
        bProcIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcInActionPerformed(evt);
            }
        });

        bProcOut.setText("Procurar...");
        bProcOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tDirOut)
                    .addComponent(tDirIn, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bProcIn)
                    .addComponent(bProcOut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tDirIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bProcIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tDirOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bProcOut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 621, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Separar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bSair, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSair)
                    .addComponent(Separar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean ValidarDir(){
        File dirIn = new File(tDirIn.getText());
        if(!dirIn.isDirectory()){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não é válido", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!dirIn.exists()){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não existe", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File dirOut = new File(tDirOut.getText());
        if(!dirOut.isDirectory()){
            JOptionPane.showMessageDialog(null, "O diretório de saída não é valido", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(!dirOut.exists()){
            JOptionPane.showMessageDialog(null, "O diretório de saída não existe", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File[] files = dirIn.listFiles();
        if(files.length==0){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não possui arquivos", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if(dirIn.toString().equals(dirOut.toString())){
            JOptionPane.showMessageDialog(null, "O diretório de entrada não pode ser igual ao diretório de saída", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }
    
    private void SepararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SepararActionPerformed
        boolean valida = ValidarDir();
        if(valida == false){
            return;
        }
        
        File dirIn = new File(tDirIn.getText());
        File dirOut = new File(tDirOut.getText());
        
                
        
        ArrayList<String> dirs = new ArrayList<String>();
        boolean criarDir = GerenciadorArquivos.ListaDirs(dirIn, dirOut, dirs, dirIn);
        int lengthDirIn = dirIn.toString().length();
        
        String nameData = "";
        String nameNames = "";

        for(int i=0;i<dirs.size();i++){
            File[] files = new File(dirs.get(i)).listFiles();
            int cData = 0;
            int cNames = 0;
            for(int j=0;j<files.length;j++){
                String nomeArq = files[j].toString();
                if(nomeArq.endsWith(".data")){
                    nameData = new String(nomeArq);
                }
                if(nomeArq.endsWith(".names")){
                    nameNames = new String(nomeArq);
                }
            }

        }
        
        try{
            //Granvando a discover Names
            System.out.println("Gravando arquivos discover.names de Treino e Teste");
            RandomAccessFile arqIn = new RandomAccessFile(nameNames, "r");
            StringBuffer buffer = new StringBuffer();
            String linha = "";
            while((linha = arqIn.readLine())!=null){
                buffer.append(linha + "\n");
            }
            arqIn.close();
            FileWriter arqOut = new FileWriter(dirOut.toString() + "/discoverTreino.names");
            arqOut.write(buffer.toString());
            arqOut.close();
            arqOut = new FileWriter(dirOut.toString() + "/discoverTeste.names");
            arqOut.write(buffer.toString());
            arqOut.close();
            buffer = null;
            
            //Gravando a Discover Data
            System.out.println("Gravando arquivos discover.data de Treino e Teste");
            StringBuffer bufferTreino = new StringBuffer();
            StringBuffer bufferTeste = new StringBuffer();
            FileWriter arqTreino = new FileWriter(dirOut.toString() + "/discoverTreino.data");
            FileWriter arqTeste = new FileWriter(dirOut.toString() + "/discoverTeste.data");
            arqIn = new RandomAccessFile(nameData, "r");
            while((linha = arqIn.readLine())!=null){
                System.out.print(".");
                if(linha.toLowerCase().contains("test")){
                    arqTeste.write(linha + "\n");
                }else{
                    arqTreino.write(linha + "\n");
                }
            }
            System.out.println("\nGerando Arquivos.");
            arqIn.close();
            
            arqTreino.close();
            arqTeste.close();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Houve um erro ao separar os arquivos.\nA operação será finalizada.","Erro",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        
        
        
        JOptionPane.showMessageDialog(null, "Operação concluída com sucesso", "OK", JOptionPane.PLAIN_MESSAGE);
        
        
}//GEN-LAST:event_SepararActionPerformed

    private void bSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_bSairActionPerformed

    private void bProcInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcInActionPerformed
        JFileChooser open = new JFileChooser();
        open.setFileSelectionMode(open.DIRECTORIES_ONLY);
        open.setDialogTitle("Selecione o Diretório");
        open.setDialogType(open.OPEN_DIALOG);
        open.showOpenDialog(null);
        if(open.getSelectedFile()==null){
            tDirIn.setText("");
        }else{
            tDirIn.setText(open.getSelectedFile().toString());
        }
    }//GEN-LAST:event_bProcInActionPerformed

    private void bProcOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcOutActionPerformed
        JFileChooser open = new JFileChooser();
        open.setFileSelectionMode(open.DIRECTORIES_ONLY);
        open.setDialogTitle("Selecione o Diretório");
        open.setDialogType(open.OPEN_DIALOG);
        open.showOpenDialog(null);
        if(open.getSelectedFile()==null){
            tDirOut.setText("");
        }else{
            tDirOut.setText(open.getSelectedFile().toString());
        }
    }//GEN-LAST:event_bProcOutActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SepararDiscoverBagTT().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Separar;
    private javax.swing.JButton bProcIn;
    private javax.swing.JButton bProcOut;
    private javax.swing.JButton bSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tDirIn;
    private javax.swing.JTextField tDirOut;
    // End of variables declaration//GEN-END:variables
    
}
