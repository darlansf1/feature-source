/*
 * ConvertARNG.java
 *
 * Created on 16 de Dezembro de 2009, 16:08
 */

package feature;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import obterngramas.Confianca;
import obterngramas.ConfiancaMedia;
import obterngramas.Gini;
import obterngramas.GiniMedio;
import obterngramas.JMeasure;
import obterngramas.JMeasureMedio;
import obterngramas.Kappa;
import obterngramas.KappaMedio;
import obterngramas.LiftNorm;
import obterngramas.LiftNormMedio;
import obterngramas.LinearCorrelation;
import obterngramas.LinearCorrelationMedia;
import obterngramas.Maximal;
import obterngramas.MaximalMedio;
import obterngramas.MutualInformation;
import obterngramas.MutualInformationMedia;
import obterngramas.QYule;
import obterngramas.QYuleMedio;
import obterngramas.ItemsetSimples;
import obterngramas.ItemsetSimplesMedio;

/**
 *
 * @author  Rafael
 */
public class ConvertARAA extends javax.swing.JFrame {

    /** Creates new form ConvertARNG */
    public ConvertARAA() {
        initComponents();
        tRank.setEnabled(false);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tDirIn = new javax.swing.JTextField();
        tDirOut = new javax.swing.JTextField();
        bProcIn = new javax.swing.JButton();
        bProcOut = new javax.swing.JButton();
        bConverter = new javax.swing.JButton();
        bSair = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        cStrategy = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        tSupMin = new javax.swing.JTextField();
        tMedObj = new javax.swing.JTextField();
        lMedObj = new javax.swing.JLabel();
        lSupMin = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cRepetir = new javax.swing.JCheckBox();
        cMedObjAut = new javax.swing.JCheckBox();
        cRank = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        tRank = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extract Features from Association Rules");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Directories"));

        jLabel1.setText("Input");

        jLabel2.setText("Output");

        bProcIn.setText("Select ...");
        bProcIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcInActionPerformed(evt);
            }
        });

        bProcOut.setText("Select ...");
        bProcOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProcOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tDirIn, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                    .addComponent(tDirOut, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bProcIn)
                    .addComponent(bProcOut))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bProcIn)
                    .addComponent(jLabel1)
                    .addComponent(tDirIn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bProcOut)
                    .addComponent(jLabel2)
                    .addComponent(tDirOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bConverter.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        bConverter.setText("Convert");
        bConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConverterActionPerformed(evt);
            }
        });

        bSair.setText("Close");
        bSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSairActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Strategy for Feature Generation"));

        cStrategy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Confidence", "Gini Index", "Itemsets", "J-Measure", "Kappa", "Lift", "Linear Correlation", "Maximal Itemsets", "Mutual Information", "Yule's Q" }));
        cStrategy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cStrategyActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Thresholds"));

        tSupMin.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tSupMin.setText("0");

        tMedObj.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tMedObj.setText("0");

        lMedObj.setText("Objective Measure");

        lSupMin.setText("Support");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lMedObj)
                    .addComponent(lSupMin))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tSupMin)
                    .addComponent(tMedObj, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSupMin)
                    .addComponent(tSupMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lMedObj)
                    .addComponent(tMedObj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel3.setText("Type / Measure");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(cStrategy, javax.swing.GroupLayout.Alignment.TRAILING, 0, 230, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cStrategy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        cRepetir.setText("Use the support value as weight");

        cMedObjAut.setText("Obtain objective measure threshold automatically");
        cMedObjAut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cMedObjAutActionPerformed(evt);
            }
        });

        cRank.setText("Use the");
        cRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cRankActionPerformed(evt);
            }
        });

        jLabel4.setText("best ranked rules");

        tRank.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tRank.setText("20");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cRank)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tRank, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(cMedObjAut)
                    .addComponent(cRepetir))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(cRepetir)
                .addGap(18, 18, 18)
                .addComponent(cMedObjAut)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cRank)
                    .addComponent(jLabel4)
                    .addComponent(tRank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bConverter, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bSair, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSair)
                    .addComponent(bConverter))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void bProcInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcInActionPerformed
    JFileChooser open = new JFileChooser();
    open.setFileSelectionMode(open.DIRECTORIES_ONLY);
    open.setDialogTitle("Selecione o Diretório");
    open.setDialogType(open.OPEN_DIALOG);
    open.showOpenDialog(null);
    if(open.getSelectedFile()==null){
        tDirIn.setText("");
    }else{
        tDirIn.setText(open.getSelectedFile().toString());
    }
}//GEN-LAST:event_bProcInActionPerformed

private void bProcOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProcOutActionPerformed
    JFileChooser open = new JFileChooser();
    open.setFileSelectionMode(open.DIRECTORIES_ONLY);
    open.setDialogTitle("Selecione o Diretório");
    open.setDialogType(open.OPEN_DIALOG);
    open.showOpenDialog(null);
    if(open.getSelectedFile()==null){
        tDirOut.setText("");
    }else{
        tDirOut.setText(open.getSelectedFile().toString());
    }
}//GEN-LAST:event_bProcOutActionPerformed

private boolean ValidarDir(){
    File dirIn = new File(tDirIn.getText());
    if(!dirIn.isDirectory()){
        JOptionPane.showMessageDialog(null, "O diretório de entrada não é válido", "Erro", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    if(!dirIn.exists()){
        JOptionPane.showMessageDialog(null, "O diretório de entrada não existe", "Erro", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    File dirOut = new File(tDirOut.getText());
    if(!dirOut.isDirectory()){
        JOptionPane.showMessageDialog(null, "O diretório de saída não é valido", "Erro", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    if(!dirOut.exists()){
        JOptionPane.showMessageDialog(null, "O diretório de saída não existe", "Erro", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    File[] files = dirIn.listFiles();
    if(files.length==0){
        JOptionPane.showMessageDialog(null, "O diretório de entrada não possui arquivos", "Erro", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    if(dirIn.toString().equals(dirOut.toString())){
        JOptionPane.showMessageDialog(null, "O diretório de entrada não pode ser igual ao diretório de saída", "Erro", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    return true;
}

private void bConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConverterActionPerformed
    
       
    boolean valida = ValidarDir();
    if(valida == false){
        return;
    }
    File dirIn = new File(tDirIn.getText());
    File dirOut = new File(tDirOut.getText());
    ArrayList<File> filesIn = new ArrayList<File>();
    ArrayList<File> filesOut = new ArrayList<File>();
    boolean criarDir = GerenciadorArquivos.ListaArquivos(dirIn, dirOut, filesIn, filesOut, dirIn);
    if(criarDir == false){
        JOptionPane.showMessageDialog(null, "Não foi possível criar os diretórios necessários para a extração dos arquivos.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    boolean repetir;
    if(cRepetir.isSelected()){
        repetir = true;
    }else{
        repetir = false;
    }
    
    int rank = 0;
    if(tRank.isEnabled()){
        try{
            rank = Integer.parseInt(tRank.getText());
        }catch(Exception e){
            
        }
        
    }
    
    Float supMin = Float.parseFloat(tSupMin.getText());
    supMin = supMin * 100;
    
    float medObj = 0;
    if(tMedObj.isEnabled()){
        try{
            medObj = Float.parseFloat(tMedObj.getText());
        }catch(Exception e){
            
        }
    }
    
    if(cStrategy.getSelectedItem().toString().equals("Confidence")){
        if(cMedObjAut.isSelected()){
            new ConfiancaMedia(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new Confianca(filesIn, filesOut, supMin, repetir, medObj, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("Gini Index")){
        if(cMedObjAut.isSelected()){
            new GiniMedio(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new Gini(filesIn, filesOut, supMin, repetir, medObj, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("Itemsets")){
        if(cMedObjAut.isSelected()){
            new ItemsetSimplesMedio(filesIn, filesOut, supMin, repetir, rank);
        }else{
            new ItemsetSimples(filesIn, filesOut, supMin, repetir, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("J-Measure")){
        if(cMedObjAut.isSelected()){
            new JMeasureMedio(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new JMeasure(filesIn, filesOut, supMin, repetir, medObj, rank);
        }    
    }else if(cStrategy.getSelectedItem().toString().equals("Kappa")){
        if(cMedObjAut.isSelected()){
            new KappaMedio(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new Kappa(filesIn, filesOut, supMin, repetir, medObj, rank);
        }    
    }else if(cStrategy.getSelectedItem().toString().equals("Lift")){
        if(cMedObjAut.isSelected()){
            new LiftNormMedio(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new LiftNorm(filesIn, filesOut, supMin, repetir, medObj, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("Linear Correlation")){
        if(cMedObjAut.isSelected()){
            new LinearCorrelationMedia(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new LinearCorrelation(filesIn, filesOut, supMin, repetir, medObj, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("Maximal Itemsets")){
        if(cMedObjAut.isSelected()){
            new MaximalMedio(filesIn, filesOut, supMin, repetir, rank);
        }else{
            new Maximal(filesIn, filesOut, supMin, repetir, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("Mutual Information")){
        if(cMedObjAut.isSelected()){
            new MutualInformationMedia(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new MutualInformation(filesIn, filesOut, supMin, repetir, medObj, rank);
        }
    }else if(cStrategy.getSelectedItem().toString().equals("Yule's Q")){
        if(cMedObjAut.isSelected()){
            new QYuleMedio(filesIn, filesOut, supMin, repetir, medObj, rank);
        }else{
            new QYule(filesIn, filesOut, supMin, repetir, medObj, rank);
        }
    }
    
    
    
    JOptionPane.showMessageDialog(null, "Operação concluída com sucesso", "NGramGenerator", JOptionPane.PLAIN_MESSAGE);
}//GEN-LAST:event_bConverterActionPerformed

private void bSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSairActionPerformed
this.dispose();
}//GEN-LAST:event_bSairActionPerformed

private void cStrategyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cStrategyActionPerformed
    if(cStrategy.getSelectedItem().toString().equals("Itemsets")){
        tMedObj.setEnabled(false);
        lMedObj.setEnabled(false);
        return;
    }else if(cStrategy.getSelectedItem().toString().equals("Maximal Itemsets")){
        tMedObj.setEnabled(false);
        lMedObj.setEnabled(false);
        return;
    }else if(cStrategy.getSelectedItem().toString().equals("Lift")){
        return;
    }
    tMedObj.setEnabled(true);
    lMedObj.setEnabled(true);
   
}//GEN-LAST:event_cStrategyActionPerformed

private void cRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cRankActionPerformed
    if(cRank.isSelected()){
        tRank.setEnabled(true);
        cMedObjAut.setEnabled(false);
        tMedObj.setEnabled(false);
    }else{
        tRank.setEnabled(false);
        cMedObjAut.setEnabled(true);
        tMedObj.setEnabled(true);
    }
}//GEN-LAST:event_cRankActionPerformed

private void cMedObjAutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cMedObjAutActionPerformed
    if(cMedObjAut.isSelected()){
        tMedObj.setEnabled(false);
    }else{
        tMedObj.setEnabled(true);
    }
}//GEN-LAST:event_cMedObjAutActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConvertARAA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConverter;
    private javax.swing.JButton bProcIn;
    private javax.swing.JButton bProcOut;
    private javax.swing.JButton bSair;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox cMedObjAut;
    private javax.swing.JCheckBox cRank;
    private javax.swing.JCheckBox cRepetir;
    private javax.swing.JComboBox cStrategy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lMedObj;
    private javax.swing.JLabel lSupMin;
    private javax.swing.JTextField tDirIn;
    private javax.swing.JTextField tDirOut;
    private javax.swing.JTextField tMedObj;
    private javax.swing.JTextField tRank;
    private javax.swing.JTextField tSupMin;
    // End of variables declaration//GEN-END:variables

}
